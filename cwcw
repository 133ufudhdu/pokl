local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local hum = char:FindFirstChildWhichIsA("Humanoid")
local charsFolder = Workspace:FindFirstChild("PlayerCharacters") or Workspace:WaitForChild("PlayerCharacters", 10)

local StellarLibrary
pcall(function()
    StellarLibrary = (loadstring(Game:HttpGet("https://raw.githubusercontent.com/Potato5466794/GC-WTB/refs/heads/main/UI/WTB-UI.luau")))()
    if StellarLibrary:LoadAnimation() then
        StellarLibrary:StartLoad()
        task.wait(0.3)
        StellarLibrary:Loaded()
    end
end)
if not StellarLibrary then warn("UI加载失败，自动招架功能仍可通过F1开关控制") end

local Window
if StellarLibrary then
    Window = StellarLibrary:Window({
        SubTitle = "战斗勇士自动招架",
        Size = UserInputService.TouchEnabled and UDim2.new(0, 420, 0, 280) or UDim2.new(0, 450, 0, 260),
        TabWidth = 120
    })
    local Tab_Parry = Window:Tab("自动招架", "rbxassetid://10709782497")
    local Tab_Info = Window:Tab("功能说明", "rbxassetid://128891143813807")
end

local vars = {
    ParryKey = Enum.KeyCode.F,
    ParryEnabled = false,
    ParryEquip = false
}
local parrySettings = {
    Range = 11,
    Prediction = 1.5,
    Chance = 85
}
local conns = { ParryCheck = nil }
local parryTargets = {}

local function sendNotify(title, content, duration)
    if StellarLibrary then
        StellarLibrary:Notify(title .. " | " .. content, duration or 2.5)
    else
        print(title .. ": " .. content)
    end
end

local function keyPress(key)
    task.wait(math.random(1, 3)/100)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait(math.random(2, 4)/100)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

local function findTool(oChar)
    local charTool = oChar:FindFirstChildWhichIsA("Tool")
    if charTool and charTool:FindFirstChild("Hitboxes") then return charTool, true end
    local itemsA = oChar:FindFirstChild("ItemsAttached")
    if not itemsA then return end
    local model = itemsA:FindFirstChildWhichIsA("Model")
    if not model then return end
    return model:FindFirstChildWhichIsA("ObjectValue").Value, false
end

local function deleteParryFromTable(oChar)
    if parryTargets[oChar] then
        if typeof(parryTargets[oChar]) == "RBXScriptConnection" then
            parryTargets[oChar]:Disconnect()
        end
        parryTargets[oChar] = nil
    end
end

local function findOthersInRadius()
    for _, oChar in pairs(charsFolder:GetChildren()) do
        if oChar.Name ~= char.Name and oChar:FindFirstChild("HumanoidRootPart") and oChar:FindFirstChild("Humanoid") then
            local mag = (oChar.HumanoidRootPart.Position - hrp.Position).Magnitude
            if mag <= 25 and mag > 0 and not parryTargets[oChar] then
                parryTargets[oChar] = false
            elseif mag > 25 and parryTargets[oChar] then
                deleteParryFromTable(oChar)
            end
        end
    end
end

local function CreateOffsetPart(oChar)
    local oHrp = oChar.HumanoidRootPart
    local oHum = oChar.Humanoid
    local moveDir = oHum.MoveDirection.Unit
    return moveDir.Magnitude == 0 and oHrp.Position or oHrp.Position + (moveDir * parrySettings.Prediction)
end

local function Parry(oChar)
    if string.match(oChar.Name, "Inf3r") then
        sendNotify("提示", "无法招架作者角色", 2)
        return
    end
    if math.random(0, 100) > parrySettings.Chance then return end
    local offset = CreateOffsetPart(oChar)
    local mag = (offset - hrp.Position).Magnitude
    if mag <= parrySettings.Range then
        if vars.ParryEquip then
            local myTool, equipped = findTool(char)
            if not equipped and myTool then
                task.wait(math.random(5, 8)/100)
                hum:EquipTool(myTool)
            end
        end
        keyPress(vars.ParryKey)
        sendNotify("招架成功", "检测到敌方攻击", 2)
    end
end

if StellarLibrary and Window then
    local Tab_Parry = Window:Tabs("自动招架")
    local Tab_Info = Window:Tabs("功能说明")

    Tab_Parry:Seperator("基础设置")
    local ParryToggle = Tab_Parry:Toggle("开启自动招架", {"开启", "关闭"}, "F键触发，检测范围" .. parrySettings.Range .. "studs", function(selected)
        local isEnabled = selected == 1
        vars.ParryEnabled = isEnabled
        if isEnabled then
            if conns.ParryCheck then conns.ParryCheck:Disconnect() end
            conns.ParryCheck = RunService.RenderStepped:Connect(function()
                if not char or not hrp then return end
                findOthersInRadius()
                for oChar, state in pairs(parryTargets) do
                    if state == false then
                        parryTargets[oChar] = true
                        local tool = findTool(oChar)
                        if tool then
                            parryTargets[oChar] = tool.DescendantAdded:Connect(function(desc)
                                if desc:IsA("BasePart") or desc:IsA("Attachment") then
                                    Parry(oChar)
                                end
                            end)
                        else
                            deleteParryFromTable(oChar)
                        end
                    end
                end
            end)
            sendNotify("功能状态", "自动招架已开启", 3)
        else
            if conns.ParryCheck then
                conns.ParryCheck:Disconnect()
                conns.ParryCheck = nil
            end
            for oChar in pairs(parryTargets) do
                deleteParryFromTable(oChar)
            end
            sendNotify("功能状态", "自动招架已关闭", 3)
        end
    end)

    Tab_Parry:Slider("招架概率", 50, 100, parrySettings.Chance, function(value)
        parrySettings.Chance = value
        sendNotify("设置更新", "招架概率：" .. value .. "%", 2)
    end)

    Tab_Parry:Slider("触发距离", 5, 15, parrySettings.Range, function(value)
        parrySettings.Range = value
        sendNotify("设置更新", "触发距离：" .. value .. " studs", 2)
    end)

    Tab_Parry:Slider("移动预判", 0, 3, parrySettings.Prediction, function(value)
        parrySettings.Prediction = value
        sendNotify("设置更新", "移动预判：" .. value, 2)
    end)

    Tab_Parry:Toggle("自动装备武器", {"开启", "关闭"}, "招架时自动装备武器（谨慎开启）", function(selected)
        vars.ParryEquip = selected == 1
        sendNotify("设置更新", "自动装备武器：" .. (vars.ParryEquip and "开启" or "关闭"), 2)
    end)

    Tab_Info:Seperator("使用提示")
    Tab_Info:Label("1. 建议招架概率设为80%-90%")
    Tab_Info:Label("2. 触发距离不超过12 studs更安全")
    Tab_Info:Label("3. 移动预判建议1-2，避免异常")
    Tab_Info:Label("4.  UI加载失败时，按F1开关功能")
end

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F1 then
        vars.ParryEnabled = not vars.ParryEnabled
        if vars.ParryEnabled then
            if conns.ParryCheck then conns.ParryCheck:Disconnect() end
            conns.ParryCheck = RunService.RenderStepped:Connect(function()
                if not char or not hrp then return end
                findOthersInRadius()
                for oChar, state in pairs(parryTargets) do
                    if state == false then
                        parryTargets[oChar] = true
                        local tool = findTool(oChar)
                        if tool then
                            parryTargets[oChar] = tool.DescendantAdded:Connect(function(desc)
                                if desc:IsA("BasePart") then
                                    Parry(oChar)
                                end
                            end)
                        else
                            deleteParryFromTable(oChar)
                        end
                    end
                end
            end)
            sendNotify("备用开关", "自动招架已开启", 3)
        else
            if conns.ParryCheck then
                conns.ParryCheck:Disconnect()
                conns.ParryCheck = nil
            end
            for oChar in pairs(parryTargets) do
                deleteParryFromTable(oChar)
            end
            sendNotify("备用开关", "自动招架已关闭", 3)
        end
    end
end)

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    hrp = char:WaitForChild("HumanoidRootPart")
    hum = char:FindFirstChildWhichIsA("Humanoid")
    if vars.ParryEnabled and not conns.ParryCheck then
        conns.ParryCheck = RunService.RenderStepped:Connect(function()
            if not char or not hrp then return end
            findOthersInRadius()
            for oChar, state in pairs(parryTargets) do
                if state == false then
                    parryTargets[oChar] = true
                    local tool = findTool(oChar)
                    if tool then
                        parryTargets[oChar] = tool.DescendantAdded:Connect(function(desc)
                            if desc:IsA("BasePart") then
                                Parry(oChar)
                            end
                        end)
                    else
                        deleteParryFromTable(oChar)
                    end
                end
            end
        end)
        sendNotify("角色重生", "自动招架已恢复", 2)
    end
end)

if StellarLibrary then
    sendNotify("加载完成", "点击自动招架标签页设置功能", 4)
else
    sendNotify("加载提示", "UI加载失败，按F1开关自动招架", 4)
end
